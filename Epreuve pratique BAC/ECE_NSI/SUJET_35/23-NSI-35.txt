BACCALAUR√âAT  

SESSION 2023 
__________________ 

√âpreuve de l‚Äôenseignement de sp√©cialit√© 

NUM√âRIQUE et SCIENCES 
INFORMATIQUES 

Partie pratique 

Classe Terminale de la voie g√©n√©rale 
_________________ 

Sujet n¬∞35 
__________________ 

DUR√âE DE L‚Äô√âPREUVE : 1 heure 

Le sujet comporte 4 pages num√©rot√©es de 1 / 4 √† 4 / 4 
D√®s que le sujet vous est remis, assurez-vous qu‚Äôil est complet. 

Le candidat doit traiter les 2 exercices. 

 1 / 4 

 
 
 
 
 
 
 
 
 
 
EXERCICE 1 (4 points) 

L'op√©rateur ¬´ ou exclusif ¬ª entre deux bits renvoie 0 si les deux bits sont √©gaux et 1 s'ils 
sont diff√©rents. Il est symbolis√© par le caract√®re ‚äï. 
Ainsi : 

ÔÇ∑  0 ‚äï 0 = 0  
ÔÇ∑  0 ‚äï 1 = 1 
ÔÇ∑  1 ‚äï 0 = 1 
ÔÇ∑  1 ‚äï 1 = 0 

On repr√©sente ici une suite de bits par un tableau contenant des 0 et des 1. 

Exemples :  
a = [1, 0, 1, 0, 1, 1, 0, 1]  
b = [0, 1, 1, 1, 0, 1, 0, 0] 
c = [1, 1, 0, 1] 
d = [0, 0, 1, 1] 

√âcrire  la  fonction  ou_exclusif  qui  prend  en  param√®tres  deux  tableaux  de  m√™me 
longueur  et  qui  renvoie  un  tableau  o√π  l‚Äô√©l√©ment  situ√©  √†  position  i  est  le  r√©sultat,  par 
l‚Äôop√©rateur  ¬´ ou  exclusif ¬ª,  des  √©l√©ments  √†  la  position  i  des  tableaux  pass√©s  en 
param√®tres.  

En consid√©rant les quatre exemples ci-dessus, cette fonction donne : 

>>> ou_exclusif(a, b) 
[1, 1, 0, 1, 1, 0, 0, 1] 
>>> ou_exclusif(c, d) 
[1, 1, 1, 0] 

 2 / 4 

 
 
 
 
 
 
 
 
 
EXERCICE 2 (4 points) 

Dans cet exercice, on appelle carr√© d‚Äôordre ùëõ un tableau de ùëõ lignes et ùëõ colonnes dont 
chaque case contient un entier naturel. 

Exemples : 

1  7 
7  1 

3  4  5 
4  4  4 
5  4  3 

2  9  4 
7  0  3 
6  1  8 

               c2   

          c3 

          c3bis 

 Un carr√© d‚Äôordre 2   

          Un carr√© d‚Äôordre 3 

        Un autre carr√© d‚Äôordre 3 

Un carr√© est dit semimagique lorsque les sommes des √©l√©ments situ√©s sur chaque ligne 
et chaque colonne sont √©gales. 

ÔÇ∑  Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne et chaque colonne 

est √©gale √† 8 pour c2 et 12 pour c3. 

ÔÇ∑  Le carr√© c3bis n‚Äôest pas semimagique car la somme de la premi√®re ligne est √©gale 

√† 15 alors que celle de la deuxi√®me ligne est √©gale √† 10. 

La classe Carre en page suivante contient des m√©thodes qui permettent de manipuler 
des carr√©s : 

ÔÇ∑  La m√©thode constructeur cr√©e un carr√© sous forme d‚Äôun tableau √† deux dimensions 

√† partir d‚Äôune liste d‚Äôentiers, et d‚Äôun ordre. 

ÔÇ∑  La m√©thode affiche permet d‚Äôafficher le carr√© cr√©√©. 

Exemple : 

>>> liste = (3, 4, 5, 4, 4, 4, 5, 4, 3) 

>>> c3 = Carre(liste, 3) 

>>> c3.affiche() 
[3, 4, 5] 
[4, 4, 4] 
[5, 4, 3] 

 3 / 4 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Compl√©ter la m√©thode est_semimagique qui renvoie True si le carr√© est semimagique, 
False sinon. Puis tester la fonction est_semimagique sur les carr√©s c2, c3 et c3bis. 

class Carre: 
    def __init__(self, liste, n): 
        self.ordre = n 
        self.tableau = [[liste[i + j * n] for i in range(n)] for 
j in range(n)] 

    def affiche(self): 
        '''Affiche un carr√©''' 
        for i in range(self.ordre): 
            print(self.tableau[i]) 

    def somme_ligne(self, i): 
        '''Calcule la somme des valeurs de la ligne i''' 
        somme = 0 
        for j in range(self.ordre): 
            somme = somme + self.tableau[i][j] 
        return somme 

    def somme_col(self, j): 
        '''Calcule la somme des valeurs de la colonne j''' 
        somme = 0 
        for i in range(self.ordre): 
            somme = somme + self.tableau[i][j] 
        return somme 

    def est_semimagique(self): 
        s = self.somme_ligne(0) 

        #test de la somme de chaque ligne 
        for i in range(...): 
            if ... != s: 
                return ... 

        #test de la somme de chaque colonne 
        for j in range(...): 
            if ... != s: 
                return ... 

        return ...   

 4 / 4 

 
 
   
     
     
 
             
             
         

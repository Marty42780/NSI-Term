BACCALAUR√âAT  

SESSION 2023 
__________________ 

√âpreuve de l‚Äôenseignement de sp√©cialit√© 

NUM√âRIQUE et SCIENCES 
INFORMATIQUES 

Partie pratique 

Classe Terminale de la voie g√©n√©rale 
_________________ 

Sujet n¬∞04 
__________________ 

DUR√âE DE L‚Äô√âPREUVE : 1 heure 

Le sujet comporte 3 pages num√©rot√©es de 1 / 3 √† 3 / 3 
D√®s que le sujet vous est remis, assurez-vous qu‚Äôil est complet. 

Le candidat doit traiter les 2 exercices. 

 1 / 3 

 
 
 
 
 
 
 
 
 
 
EXERCICE 1 (4 points) 

√âcrire  une  fonction  a_doublon  qui  prend  en  param√®tre  une  liste  tri√©e  de  nombres  et 
renvoie True si la liste contient au moins deux nombres identiques, False sinon. 

Par exemple : 

>>> a_doublon([]) 
False 

>>> a_doublon([1]) 
False 

>>> a_doublon([1, 2, 4, 6, 6]) 
True 

>>> a_doublon([2, 5, 7, 7, 7, 9]) 
True 

>>> a_doublon([0, 2, 3]) 
False 

EXERCICE 2 (4 points) 

On souhaite g√©n√©rer des grilles du jeu de d√©mineur √† partir de la position des bombes √† 
placer. 

On  se  limite  √†  la  g√©n√©ration  de  grilles  carr√©es  de  taille  ùëõ √ó ùëõ  o√π  ùëõ  est  le  nombre  de 
bombes du jeu. 

Dans le jeu du d√©mineur, chaque case de la grille contient soit une bombe, soit une valeur 
qui correspond aux nombres de bombes situ√©es dans le voisinage direct de la case (au-
dessus, en dessous, √† droite, √† gauche ou en diagonal : chaque case a donc 8 voisins si 
elle n'est pas situ√©e au bord de la grille). 

Voici un exemple de grille 5x5 de d√©mineur 
dans  laquelle  la  bombe  est  repr√©sent√©e 
par une √©toile : 

listes  pour 
On  utilise  une 
repr√©senter la grille et on choisit de coder 
une bombe par la valeur -1. 

liste  de 

1  1  1  0  0 
1  *  1  1  1 
2  2  3  2  * 
1  *  2  *  3 
1  1  2  2  * 

L'exemple ci-contre sera donc cod√© par la 
liste : 

1, 
1, 

1, 
-1, 
2, 

          [[1, 
 [1, 
 [2, 
3, 
 [1,  -1,  2,  -1,  3],  
 [1,   1,   2,    2,  -1]]

0],  
1],  

0, 
1, 

-1], 

2, 

 2 / 3 

 
 
 
 
 
 
 
 
 
Compl√©ter le code suivant afin de g√©n√©rer des grilles de d√©mineur, on pourra v√©rifier que 
l‚Äôinstruction g√©n√®re_grille([(1,  1),  (2,  4),  (3,  1),  (3,  3),  (4,  4)]) 
produit bien la liste donn√©e en exemple. 

def voisinage(n, ligne, colonne): 

    """  Renvoie  la  liste  des  coordonn√©es  des  voisins  de  la  case   
       (ligne, colonne) en g√©rant les cases sur les bords. """ 

    voisins = [] 

    for l in range(max(0,ligne-1), min(n, ligne+2)): 

        for c in range(max(0, colonne-1), min(n, colonne+2)): 

            if (l, c) != (ligne, colonne): 

                voisins.append((l,c)) 

    return voisins 

def incremente_voisins(grille, ligne, colonne): 

    """ Incr√©mente de 1 toutes les cases voisines d'une bombe.""" 

    voisins = ... 

    for l, c in voisins: 

        if grille[l][c] != ...: # si ce n'est pas une bombe 

            ...     

        # on ajoute 1 √† sa valeur              

def genere_grille(bombes): 

    """  Renvoie  une  grille  de  d√©mineur  de  taille  nxn  o√π  n  est 
   le  nombre  de  bombes,  en  pla√ßant  les  bombes  √†  l'aide  de 
        la  liste  bombes  de  coordonn√©es  (tuples)  pass√©e  en 
        param√®tre. """   

    n = len(bombes) 

    # Initialisation d'une grille nxn remplie de 0 

    grille = [[0 for colonne in range(n)] for ligne in range(n)] 

    # Place les bombes et calcule les valeurs des autres cases 

    for ligne, colonne in bombes: 

        grille[ligne][colonne] = ...  # place la bombe 

        ...     

    return grille 

   # incr√©mente ses voisins 

 3 / 3 

 
 
 
 
 
